{
  "Bank.Domain.BankAccount.html": {
    "href": "Bank.Domain.BankAccount.html",
    "title": "Class BankAccount | Bank.Domain",
    "summary": "Class BankAccount Namespace Bank.Domain Assembly Bank.Domain.dll public class BankAccount Inheritance object BankAccount Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BankAccount(string, double) public BankAccount(string customerName, double balance) Parameters customerName string balance double Fields DebitAmountExceedsBalanceMessage public const string DebitAmountExceedsBalanceMessage = \"Debit amount exceeds balance\" Field Value string DebitAmountLessThanZeroMessage public const string DebitAmountLessThanZeroMessage = \"Debit amount is less than zero\" Field Value string Properties Balance public double Balance { get; } Property Value double CustomerName public string CustomerName { get; } Property Value string Methods Credit(double) public void Credit(double amount) Parameters amount double Debit(double) public void Debit(double amount) Parameters amount double"
  },
  "Bank.Domain.Tests.BankAccountTests.html": {
    "href": "Bank.Domain.Tests.BankAccountTests.html",
    "title": "Class BankAccountTests | Bank.Domain",
    "summary": "Class BankAccountTests Namespace Bank.Domain.Tests Assembly Bank.Domain.Tests.dll public class BankAccountTests Inheritance object BankAccountTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Credit_WhenAmountIsLessThanZero_ShouldThrowArgumentOutOfRange() [Test] public void Credit_WhenAmountIsLessThanZero_ShouldThrowArgumentOutOfRange() Credit_WhenAmountIsMoreThanZero_ShouldIncreaseBalance() [Test] public void Credit_WhenAmountIsMoreThanZero_ShouldIncreaseBalance() Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange() [Test] public void Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange()"
  },
  "Bank.Domain.Tests.html": {
    "href": "Bank.Domain.Tests.html",
    "title": "Namespace Bank.Domain.Tests | Bank.Domain",
    "summary": "Namespace Bank.Domain.Tests Classes BankAccountTests"
  },
  "Bank.Domain.html": {
    "href": "Bank.Domain.html",
    "title": "Namespace Bank.Domain | Bank.Domain",
    "summary": "Namespace Bank.Domain Classes BankAccount"
  },
  "Cobertura/SummaryGithub.html": {
    "href": "Cobertura/SummaryGithub.html",
    "title": "Summary | Bank.Domain",
    "summary": "Summary Summary Generated on: 05/26/2025 - 00:52:21 Coverage date: 05/26/2025 - 00:52:20 Parser: Cobertura Assemblies: 1 Classes: 1 Files: 1 Line coverage: 70% (14 of 20) Covered lines: 14 Uncovered lines: 6 Coverable lines: 20 Total lines: 33 Branch coverage: 50% (3 of 6) Covered branches: 3 Total branches: 6 Method coverage: Feature is only available for sponsors Coverage Bank.Domain - 70% Name Line Branch Bank.Domain 70% 50% Bank.Domain.BankAccount 70% 50%"
  },
  "disenio.html": {
    "href": "disenio.html",
    "title": "| Bank.Domain",
    "summary": "classDiagram class BankAccount BankAccount : +String CustomerName BankAccount : +Double Balance BankAccount : +Debit() Void BankAccount : +Credit() Void"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Bank.Domain",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Bank.Domain",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Bank.Domain",
    "summary": "This is the HOMEPAGE. Diagrama de Clases Pruebas"
  }
}